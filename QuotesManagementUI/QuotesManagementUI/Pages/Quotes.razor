@page "/"

@using QuotesManagementUI.ResultSet

@using QuotesManagementUI.QuotesServices

@inject IQuotesApiService QuotesApiService

<MudContainer Class="mt-4">
    <div class="d-flex justify-content-between w-100">
        <MudText Typo="Typo.h4" GutterBottom="true">Quotes Info</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="float-right mb-2" Href="AddQuote">Add Quote</MudButton>
    </div>

    <MudGrid class="mb-3">
        <MudItem xs="12" md="4">
            <MudTextField Label="Search by Author" @bind-Value="searchAuthor" Variant="Variant.Outlined" FullWidth="true" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudSelect T="string" Label="Search by Tags" MultiSelection="true"
                       @bind-Value="selectedTagLabel" @bind-SelectedValues="selectedTags" Variant="Variant.Outlined" FullWidth="true">

                @foreach (var tag in allTags)

                {
                    <MudSelectItem T="string" Value="@tag">@tag</MudSelectItem>

                }
            </MudSelect>

        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField Label="Search by Quote Content" @bind-Value="searchQuote" Variant="Variant.Outlined" FullWidth="true" />
        </MudItem>
    </MudGrid>

    <MudGrid>

        <MudItem>
            <div class="mb-4">

                @if (selectedTags.Any())

                {
                    <MudChipSet T="string" Class="my-chipset">

                        @foreach (var tag in selectedTags)

                        {
                            <MudChip Color="Color.Primary" CloseIcon="true" Size="Size.Small" OnClick="@(() => RemoveTag(tag))">@tag</MudChip>

                        }
                    </MudChipSet>

                }
            </div>
            <div class="mb-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchQuotes">Search</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="ResetSearch" Class="ml-2">Reset</MudButton>
            </div>
        </MudItem>
    </MudGrid>

    @if (quotes == null)

    {
        <MudText Typo="Typo.body1" Class="mt-2"><em>Loading...!</em></MudText>

    }

    else

    {
        <MudTable Items="quotes" AllowUnsorted="true" Hover="true" Striped="true" Bordered="true" SortLabel="Sort By">
            <HeaderContent>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<QuoteResult, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<QuoteResult, object>(x=>x.Author)">Author</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center"><MudTableSortLabel SortBy="new Func<QuoteResult, object>(x=>x.Quote)">Quote</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:center">Tags</MudTh>
                <MudTh Style="text-align:center">Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Author">@context.Author</MudTd>
                    <MudTd DataLabel="Quote">@context.Quote</MudTd>
                    <MudTd DataLabel="Tags">
                        <MudChipSet T="string" Class="my-chipset">

                            @foreach (var tag in @context.Tags)

                        {
                            <MudChip Color="Color.Primary" Size="Size.Small">@tag</MudChip>

                        }
                    </MudChipSet>
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Text" Color="Color.Info" Href="@($"EditQuote/{context.Id}")">Edit</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error" Href="@($"DeleteQuote/{context.Id}")">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
            </PagerContent>
        </MudTable>

    }
</MudContainer>

@code {

    private List<QuoteResult> quotes = new();
    private string searchAuthor = string.Empty;
    private string selectedTagLabel { get; set; } = "No tags selected";
    private IEnumerable<string> selectedTags { get; set; } = new HashSet<string>();
    private List<string> allTags = new List<string>();
    private string searchQuote = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllQuotes();
        await LoadAllTags();
    }

    private async Task LoadAllQuotes()
    {
        quotes = (await QuotesApiService.GetAllQuotes()).ToList();
    }

    private async Task LoadAllTags()
    {
        allTags = await QuotesApiService.GetAllTagNames();
    }

    private async Task SearchQuotes()
    {
        var tagList = selectedTags.ToList();
        quotes = (await QuotesApiService.SearchQuotes(searchAuthor, tagList, searchQuote)).ToList();
    }

    private void RemoveTag(string tag)
    {
        selectedTags = selectedTags.Where(t => t != tag).ToList();
    }

    private async Task ResetSearch()
    {
        searchAuthor = string.Empty;
        selectedTags = new HashSet<string>();
        searchQuote = string.Empty;
        await LoadAllQuotes();
    }

}

